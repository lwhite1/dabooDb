package org.daboodb.daboo.generated.protobufs;

option java_package = "org.daboodb.daboo.generated.protobufs";
option java_outer_classname = "Request";

/**
 *  A write request message
 */
message WriteRequest {
    required Header header = 1;
    required bool isDelete = 2;
    optional WriteRequestBody writeBody = 3;
    optional DeleteRequestBody deleteBody = 4;
}

/**
 *  A Get request message
 */
message GetRequest {
    required Header header = 1;
    required GetRequestBody body = 2;
}

/**
 *  A Get request message
 */
message GetRangeRequest {
    required Header header = 1;
    required GetRangeRequestBody body = 2;
}

/**
* The header for a request
*/
message Header {

    /** A byte array that uniquely identifies requests. Typically a UUID */
    required bytes id = 1;

    /** The time the request was created (Not sent), according to the client */
    required int64 timestamp = 2;

    /** The type of request */
    required RequestType requestType = 3;
}

/**
*   The body of a write request
*/
message WriteRequestBody {
    repeated DocumentKeyValue documentKeyValue = 1;
}

/**
*   The body of a delete request
*/
message DeleteRequestBody {
    repeated Document document = 1;
}

/**
*   The body of a get request
*/
message GetRequestBody {
    repeated bytes key = 1;   //keys to get
}

/**
*   The body of a get request
*/
message GetRangeRequestBody {
    optional bytes startKey = 1;
    optional bytes endKey = 2;
}

/**
*   The kind of request
*/
enum RequestType {
  GET = 1;
  WRITE = 2;
  DELETE = 3;
  QUERY = 4;
}

/**
*   A Document, which is the thing written in a write request
*/
message Document {
    /** A unique identifier for this document */
    required bytes key = 1;

    /** The java class name of the class of the document */
    required string contentClass = 2;

    /** A human-friendly name for the kind of document, such as a company or user. Used for querying */
    required string contentType = 3;

    /** The version of the json schema used to encode the payload */
    required int32 schemaVersion = 4;

    /** The document serialized as bytes, possibly compressed or encrypted */
    required bytes contentBytes = 5;

    /** The current instance (document) version of this object */
    required int32 instanceVersion = 6;
}

/**
*   A reply to a WriteRequest
*/
message WriteReply {
    required int64 timestamp = 1;
    optional bytes requestId = 2;
    optional ErrorCondition errorCondition = 3;
}

/**
*   a get reply
*/
message GetReply {
    required int64 timestamp = 1;
    optional bytes requestId = 2;
    optional ErrorCondition errorCondition = 3;
    repeated bytes documentBytes = 4;
}

/**
*  Error information returned in a reply
*/
message ErrorCondition {
    optional ErrorType errorType = 1;
    optional ErrorOrigin origin = 2;
    optional bytes token = 3;
    optional bytes requestId = 4;
    optional string description = 5;
    optional bytes stackTrace = 6;
}

enum ErrorOrigin {
    OTHER_OR_UNKNOWN = 1;

    // an issue that occurs below CommClient in the client side
    CLIENT = 2;

    // an error that occurs above CommServer in the server side
    SERVER = 3;

    // a marshalling, unmarshalling, or data transmission issue; usually originating in CommClient or CommServer
    MESSAGING = 4;
}

enum ErrorType {
    NONE = 1;
    OPTIMISTIC_LOCK_EXCEPTION = 2;
    PERSISTENCE_EXCEPTION = 3;
    REQUEST_EXCEPTION = 4;
    SERIALIZATION_EXCEPTION = 5;
    COMMUNICATION_EXCEPTION = 6;
}

message DocumentKeyValue {
    required bytes key = 1;
    required bytes value = 2;
}